import os
import telebot
import random
import time
import json
from datetime import datetime, timedelta
from openai import OpenAI

# --- Настройки ---
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # "@my_channel" или "-1001234567890"
SLEEP_SECONDS = int(os.getenv("SLEEP_SECONDS", "180"))  # пауза между постами (сек)
HISTORY_FILE = "used_combinations.json"
HISTORY_DAYS = int(os.getenv("HISTORY_DAYS", "30"))

if not BOT_TOKEN:
    raise SystemExit("❌ Ошибка: переменная окружения BOT_TOKEN (или TELEGRAM_TOKEN) не задана.")
if not CHANNEL_ID:
    raise SystemExit("❌ Ошибка: переменная окружения CHANNEL_ID не задана.")

bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- Месяцы для русского формата даты ---
MONTHS = {
    1: "января", 2: "февраля", 3: "марта", 4: "апреля",
    5: "мая", 6: "июня", 7: "июля", 8: "августа",
    9: "сентября", 10: "октября", 11: "ноября", 12: "декабря"
}

# --- Колода Таро (78 карт) ---
tarot_cards = [
    "Шут — новые начинания, свобода", "Маг — сила воли, мастерство", "Верховная Жрица — интуиция, тайны",
    "Императрица — изобилие, забота", "Император — порядок, власть", "Иерофант — традиции, обучение",
    "Влюблённые — выбор, гармония", "Колесница — движение, победа", "Сила — внутренняя стойкость, мужество",
    "Отшельник — поиск истины, уединение", "Колесо Фортуны — перемены, судьба", "Справедливость — баланс, честность",
    "Повешенный — переоценка, новые взгляды", "Смерть — трансформация, конец и начало", "Умеренность — гармония, терпение",
    "Дьявол — искушения, зависимости", "Башня — разрушение, освобождение", "Звезда — надежда, вдохновение",
    "Луна — иллюзии, сны", "Солнце — радость, успех", "Суд — пробуждение, возрождение", "Мир — завершение, целостность",
    # Жезлы
    "Туз Жезлов — энергия, возможности", "Двойка Жезлов — планирование, выбор", "Тройка Жезлов — ожидания, перспективы",
    "Четвёрка Жезлов — праздник, стабильность", "Пятёрка Жезлов — конкуренция, вызов", "Шестёрка Жезлов — победа, признание",
    "Семёрка Жезлов — защита, упорство", "Восьмёрка Жезлов — скорость, новости", "Девятка Жезлов — стойкость, напряжение",
    "Десятка Жезлов — тяжесть, ответственность", "Паж Жезлов — энтузиазм, начало", "Рыцарь Жезлов — решимость, движение",
    "Королева Жезлов — уверенность, вдохновение", "Король Жезлов — лидерство, сила",
    # Кубки
    "Туз Кубков — эмоции, любовь", "Двойка Кубков — союз, партнерство", "Тройка Кубков — радость, друзья",
    "Четвёрка Кубков — скука, недовольство", "Пятёрка Кубков — разочарование, потеря", "Шестёрка Кубков — воспоминания, прошлое",
    "Семёрка Кубков — иллюзии, выбор", "Восьмёрка Кубков — уход, поиск смысла", "Девятка Кубков — удовольствие, исполнение",
    "Десятка Кубков — гармония, семья", "Паж Кубков — вдохновение, чувства", "Рыцарь Кубков — романтика, мечты",
    "Королева Кубков — сострадание, чувствительность", "Король Кубков — зрелость, баланс",
    # Мечи
    "Туз Мечей — истина, ясность", "Двойка Мечей — выбор, сомнения", "Тройка Мечей — боль, разрыв",
    "Четвёрка Мечей — отдых, восстановление", "Пятёрка Мечей — конфликт, поражение", "Шестёрка Мечей — движение вперёд",
    "Семёрка Мечей — хитрость, осторожность", "Восьмёрка Мечей — ограничения, страх", "Девятка Мечей — тревога, кошмары",
    "Десятка Мечей — конец, поражение", "Паж Мечей — любопытство, идеи", "Рыцарь Мечей — напор, импульс",
    "Королева Мечей — мудрость, независимость", "Король Мечей — рассудительность, логика",
    # Пентакли
    "Туз Пентаклей — возможности, материальные блага", "Двойка Пентаклей — баланс, адаптация", "Тройка Пентаклей — сотрудничество",
    "Четвёрка Пентаклей — удержание, контроль", "Пятёрка Пентаклей — трудности, лишения", "Шестёрка Пентаклей — помощь, щедрость",
    "Семёрка Пентаклей — терпение, ожидание", "Восьмёрка Пентаклей — работа, мастерство", "Девятка Пентаклей — успех, самодостаточность",
    "Десятка Пентаклей — богатство, семья", "Паж Пентаклей — учеба, практичность", "Рыцарь Пентаклей — надёжность, трудолюбие",
    "Королева Пентаклей — забота, уют", "Король Пентаклей — стабильность, достаток"
]

# --- Знаки и совместимость ---
signs = [
    "♈️ Овен", "♉️ Телец", "♊️ Близнецы", "♋️ Рак",
    "♌️ Лев", "♍️ Дева", "♎️ Весы", "♏️ Скорпион",
    "♐️ Стрелец", "♑️ Козерог", "♒️ Водолей", "♓️ Рыбы"
]

compatibility = {
    "Овен": "Лев, Стрелец", "Телец": "Дева, Козерог", "Близнецы": "Весы, Водолей",
    "Рак": "Скорпион, Рыбы", "Лев": "Овен, Стрелец", "Дева": "Телец, Козерог",
    "Весы": "Близнецы, Водолей", "Скорпион": "Рак, Рыбы", "Стрелец": "Овен, Лев",
    "Козерог": "Телец, Дева", "Водолей": "Близнецы, Весы", "Рыбы": "Рак, Скорпион"
}

focus_options = [
    "Эмоциональная глубина", "Финансовая стабильность", "Творческое самовыражение",
    "Общение и связи", "Семейное благополучие", "Личностный рост",
    "Духовный поиск", "Физическая активность", "Профессиональный успех",
    "Внутренний баланс", "Отношения и дружба", "Смелые решения"
]

# --- Работа с историей ---
def load_history():
    if not os.path.exists(HISTORY_FILE):
        return set()
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
        cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)
        return {tuple(item["combo"]) for item in raw if datetime.fromisoformat(item["date"]) > cutoff}
    except Exception:
        return set()

def save_history(history):
    try:
        data = [{"combo": list(c), "date": datetime.now().isoformat()} for c in history]
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

used_combinations = load_history()

# --- Генерация прогноза через GPT ---
def generate_prediction(sign: str) -> str:
    prompt = f"""
Сгенерируй короткий гороскоп-прогноз для знака {sign} в стиле ироничных заметок о жизни.
Условия:
- Только на русском языке, никаких английских слов.
- 1–2 предложения максимум.
- Лёгкая ирония, юмор или сарказм.
- Тематика: повседневность, настроение, случайные события, странности дня.
- Не использовать офисный стиль.

Примеры:
- Вы из тех, что и рыбку без труда выловят, и клевер четырехлистный найдут. Такой вот день.
- Отложили все с понедельника на выходные, и они, блин, взяли и наступили. Что за треш.
- В вашем словарном запасе скоро не останется ничего, кроме матов.
- Сегодня ваша мечта — расслабить мышцы шеи и плечи.
"""
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.9,
        max_tokens=45  # ограничение на длину прогноза
    )
    return response.choices[0].message.content.strip()


def generate_unique_combo(sign: str):
    for _ in range(4000):
        prediction = generate_prediction(sign)
        card = random.choice(tarot_cards)
        focus = random.choice(focus_options)
        combo = (prediction, card, focus)
        if combo not in used_combinations:
            used_combinations.add(combo)
            save_history(used_combinations)
            return prediction, card, focus
    used_combinations.clear()
    save_history(used_combinations)
    return generate_unique_combo(sign)

# --- Проверка доступа ---
def assert_channel_access():
    try:
        bot.get_chat(CHANNEL_ID)
    except Exception as e:
        raise SystemExit(f"❌ Ошибка доступа к каналу: {e}\nПроверь ID и права бота (бот должен быть админом).")

# --- Формат даты ---
def russian_date():
    now = datetime.now()
    return f"{now.day} {MONTHS[now.month]}"

# --- Главная отправка ---
def main():
    print("Проверяю доступ к каналу...")
    assert_channel_access()
    print("✅ Доступ есть. Начинаю отправку...")

    for sign in signs:
        prediction, card, focus = generate_unique_combo(sign)
        sign_name = sign.split(" ")[1]  # например "Овен"
        date_str = russian_date()
        compatibility_text = compatibility.get(sign_name, "—")

        text = (
            f"{sign}, {date_str}\n\n"
            f"💡 Прогноз: {prediction}\n\n"
            f"🎴 Карта дня: {card}\n\n"
            f"🎯 Фокус дня: {focus}\n"
            f"💞 Совместимость: {compatibility_text}\n\n"
            f"🔮 <a href=\"https://t.me/+QIQFGYWwkLhiYjFi\">Научный гороскоп</a>"
        )

        try:
            bot.send_message(CHANNEL_ID, text, parse_mode="HTML", disable_web_page_preview=True)
            print(f"✔ {sign} — отправлено. Карта: {card} | Фокус: {focus}")
        except Exception as e:
            print(f"❌ Ошибка при {sign}: {e}")

        if SLEEP_SECONDS > 0:
            time.sleep(SLEEP_SECONDS)

    print("🎉 Готово — все гороскопы отправлены.")

if __name__ == "__main__":
    main()
